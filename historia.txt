Esta es la historia de Amue Muñoz

Amue Muñoz tiene 33 años y nació en Perú y vivi la vida

parece alto pero mide 1.71

comandos git:

git config --list - para ver variables configuradas por defecto
git config  --list --show-origin - para ver donde estan guardadas las configuraciones
git config --global user.name "Amue Muñoz"  - establezco el nombre con el que trabajare el repo
git config --global user.email "amueedinson@gmail.com"  - establezco el mail con el que trabajare el repo

git init -  para iniciar repositorio
git add <files> - para agragar archivos al staging
git commit -m "comentario" - para subirlo al repositorio (si no pongo comentario me lleva al vim y se sale con esc + shift-z-z)

git log <file> - para ver historia de los archivos
git log --stat - cambios especificos en cada commit
git show <file> - para ver los cambios en los archivos
git diff hash1(más vieja) hash2

git checkout hash <files> - para moverte a este a commit, se visulizara dicha versión (si se hace un commit desde esta version pasara a ser parte del master)

git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

git branch <nombreRama> - para crear una nombreRama
git checkout -b <nombreRama> -para crear una rama

git merge <nombreRama> - usualmente se hace desde master ya que traera el cambi hacia esta rama.

git remote add origin URL - para agregar repositorio remoto a repositorio local y conectarlos (se debio crear un repositorio en github, gitlab, bitbuckt,etc)
git remote -v - para verificar que la url de repositorio remoto se haya guardado
git pull origin master --allow-unrelated-histories  - para traer el readme o otros archivos previamente agregador en el repos remoto
git push origin master - una vez  teniendo todo lo de remoto en local ya puedes enviar los archivo de local que no tenia el repo remoto

#comando especial para cambiar nombre como rama master a "main"
git branch -M main  - para cambiar nombre "master" a una nueva llamada main y con ello puede hacer push a la misma rama default en github.


#####################################Configurar llave ssh ###################################
Generar una nueva llave SSH: (Cualquier sistema operativo)

ssh-keygen -t rsa -b 4096 -C "youremail@example.com"

Comprobar proceso y agregarlo (Windows)

eval $(ssh-agent -s)
ssh-add ~/.ssh/id_rsa
Comprobar proceso y agregarlo (Mac)

eval "$(ssh-agent -s)"

¿Usas macOS Sierra 10.12.2 o superior?
Haz lo siguiente:

cd ~/.ssh
Crea un archivo config…
Con Vim vim config
Con VSCode code config
Pega la siguiente configuración en el archivo…

Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa

Agrega tu llave

ssh-add -K ~/.ssh/id_rsa

# creacion de tags
Crear un nuevo tag y asignarlo a un commit: git tag -a nombre-del-tag id-del-commit.
Borrar un tag en el repositorio local: git tag -d nombre-del-tag.
Listar los tags de nuestro repositorio local: git tag o git show-ref --tags.
Publicar un tag en el repositorio remoto: git push origin --tags.
Borrar un tag del repositorio remoto: git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag.

#Uso de alias (recomendacion)
git config --global alias.superlog "log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias nombre-alias="git log --all --graph --decorate --oneline"

#Historia de las ramas
git show branch
git show branch --all
gitk - abrira un software mas visual

#para subir una rama local a remoto
git push origin nombre-rama


otros no vistos:

git merge
git pull
git push
git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt
